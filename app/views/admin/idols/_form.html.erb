<%= form_with(model: [:admin, idol]) do |f| %>
  <% if idol.errors.any? %>
    <div class="card mb-3 exception-card">
      <div class="card-body">
        <ul class='m-0 p-0'>
          <% idol.errors.each do |error| %>
            <li class="list-unstyled"><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
    </div>
  <% end %>

  <div class="mb-3">
    <%= f.label :name, class: 'form-label' %>
    <%= f.text_field :name, class: 'form-control', placeholder: '名前', disabled: disabled %>
  </div>
  <div class="mb-3">
    <%= tag.p 'image', class: "text-reset mb-2" %>
    <%= f.label :image do %>
      <%= tag.div class: 'form_preview_wrap' do %>
        <%= image_tag idol.image_url, id: 'image_preview', class: 'img-fluid form_preview', style: "#{disabled ? 'pointer-events: none;' : ''}" %>
      <% end %>
      <%= f.file_field :image, class: 'form-control', style: 'display:none', onchange: "fileInputHandler(event, 'image', '#{IdolImageUploader.default_url}')", disabled: disabled %>
      <%= f.hidden_field :image_cache %>
      <%= tag.span idol.image.identifier || 'No Image', id: 'image_preview_name', class: 'text-secondary' %>
    <% end %>
  </div>
  <div class="mb-3">
    <%= f.label :birth_date, class: 'form-label' %>
    <%= f.date_field :birth_date, class: 'form-control', disabled: disabled  %>
  </div>
  <div class="mb-3">
    <%= f.label :comment, class: 'form-label' %>
    <%= f.text_area :comment, class: 'form-control', placeholder: 'コメント', disabled: disabled %>
  </div>
  <div class="mb-3">
    <%= f.submit nil, class: 'btn btn-primary mx-2 px-4' if !disabled %>
    <% if action_name == 'show' %>
      <%= link_to 'Edit', edit_admin_idol_path(idol), class: 'btn btn-primary mx-2 px-4' %>
      <%= link_to 'Delete', admin_idol_path(idol), method: :delete, class: 'btn btn-outline-danger mx-2 px-4', data: {confirm: 'Are you sure?'} %>
    <% end %>
    <%= link_to 'Back', back_url, class: 'btn btn-secondary mx-2 px-4' %>
  </div>
<% end %>

<%= content_for :script do %>
  <script>
    const fileInputHandler = (e, model, default_url) => {
      console.log(default_url);
      const currnetElement = e.currentTarget;
      console.log(currnetElement);
      const previewElement = document.getElementById(`${model}_preview`);
      const fileNameElement = document.getElementById(`${model}_preview_name`);
      const selectedfiles = currnetElement.files;

      if (selectedfiles.length === 0) {
        previewElement.src = default_url;
        fileNameElement.textContent = 'No Image';
        return;
      }

      for (let i = 0; i < selectedfiles.length; i++) {
        const file = selectedfiles[i];
        const reader = new FileReader();
        reader.onloadend = function() {
          previewElement.src = reader.result;
        };
        reader.readAsDataURL(file);
        fileNameElement.textContent = file.name;
      };
    };
  </script>
<% end %>
